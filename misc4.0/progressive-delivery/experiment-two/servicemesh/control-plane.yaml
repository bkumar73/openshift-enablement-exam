
apiVersion: maistra.io/v2
kind: ServiceMeshControlPlane
metadata:
  name: basic
spec:
  version: v2.4
  mode: ClusterWide
  meshConfig:
    extensionProviders:
    - name: prometheus
      prometheus: {}
  # techPreview:
  #   gatewayAPI:
  #     enabled: true 
  security:
    manageNetworkPolicy: false            
  proxy:
    runtime:
      container:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 128Mi
  tracing:
    type: Jaeger
  gateways:
    ingress: # istio-ingressgateway
      service:
        type: ClusterIP
        ports:
        - name: status-port
          port: 15020
        - name: http2
          port: 80
          targetPort: 8080
        - name: https
          port: 443
          targetPort: 8443
      meshExpansionPorts: []
    egress: # istio-egressgateway
      service:
        type: ClusterIP
        ports:
        - name: status-port
          port: 15020
        - name: http2
          port: 80
          targetPort: 8080
        - name: https
          port: 443
          targetPort: 8443
    additionalIngress:
      some-other-ingress-gateway: {}
    additionalEgress:
      some-other-egress-gateway: {}

  policy:
    type: Istiod

  telemetry:
    type: Istiod # or Mixer

  addons:
    prometheus:
      enabled:  false  
    grafana:
      enabled: false
      install:
        config:
          env: {}
          envSecrets: {}
        persistence:
          enabled: true
          storageClassName: ""
          accessMode: ReadWriteOnce
          capacity:
            requests:
              storage: 5Gi
        service:
          ingress:
            contextPath: /grafana
            tls:
              termination: reencrypt
    kiali:
      name: kiali
      enabled: false
      install: # install kiali CR if not present
        dashboard:
          viewOnly: false
          enableGrafana: true
          enableTracing: true
          enablePrometheus: true
      service:
        ingress:
          contextPath: /kiali
    jaeger:
      name: jaeger
      install:
        storage:
          type: Memory # or Memory
        #   memory:
        #     maxTraces: 100000
        #   elasticsearch:
        #     nodeCount: 3
        #     storage: {}
        #     redundancyPolicy: SingleRedundancy
        #     indexCleaner: {}
        # ingress: {} # jaeger ingress configuration
  runtime:
    components:
      pilot:
        deployment:
          replicas: 2
        pod:
          affinity: {}
      grafana:
        deployment: {}
        pod: {}
      kiali:
        deployment: {}
        pod: {}  
---
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: enable-prometheus-metrics
spec:
  metrics:
  - providers:
    - name: prometheus
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istiod-monitor
  namespace: istio-system
spec:
  targetLabels:
  - app
  selector:
    matchLabels:
      istio: pilot
  endpoints:
  - port: http-monitoring
    interval: 30s
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: istio-proxies-monitor
  namespace: istio-system 
spec:
  selector:
    matchExpressions:
    - key: istio-prometheus-ignore
      operator: DoesNotExist
  podMetricsEndpoints:
  - path: /stats/prometheus
    interval: 30s
    relabelings:
    - action: keep
      sourceLabels: [__meta_kubernetes_pod_container_name]
      regex: "istio-proxy"
    - action: keep
      sourceLabels: [__meta_kubernetes_pod_annotationpresent_prometheus_io_scrape]
    - action: replace
      regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
      replacement: '[$2]:$1'
      sourceLabels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
      targetLabel: __address__
    - action: replace
      regex: (\d+);((([0-9]+?)(\.|$)){4})
      replacement: $2:$1
      sourceLabels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
      targetLabel: __address__
    - action: labeldrop
      regex: "__meta_kubernetes_pod_label_(.+)"
    - sourceLabels: [__meta_kubernetes_namespace]
      action: replace
      targetLabel: namespace
    - sourceLabels: [__meta_kubernetes_pod_name]
      action: replace
      targetLabel: pod_name
    - action: replace
      replacement: "basic-istio-system" 
      targetLabel: mesh_id
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: istio-kiali-ingress
  namespace: istio-system
spec:
  podSelector:
    matchLabels:
      app: kiali
  ingress:
    - {}
  policyTypes:
    - Ingress
#---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-from-openshift-ingress
#   namespace: istio-ingress
# spec:
#   ingress:
#   - from:
#     - namespaceSelector:
#         matchLabels:
#           network.openshift.io/policy-group: ingress
#   podSelector: {}
#   policyTypes:
#   - Ingress
---
apiVersion: kiali.io/v1alpha1
kind: Kiali
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/instance: istio-system
    app.kubernetes.io/version: 2.4.1-1-7
    app.kubernetes.io/component: kiali
    app.kubernetes.io/name: kiali
spec:
  api:
    namespaces:
      exclude: []
  auth:
    strategy: openshift
  deployment:
    accessible_namespaces:
      - bookinfo
      - istio-ingress
      - nginx-echo-headers
    image_pull_policy: ''
    ingress:
      enabled: true
    namespace: istio-system
    pod_labels:
      sidecar.istio.io/inject: 'false'
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    logger:
      log_level: debug
  external_services:
    custom_dashboards:
      namespace_label: kubernetes_namespace
    grafana:
      auth:
        password: ciao
        type: basic
        use_kiali_token: false
        username: internal
      enabled: true
      in_cluster_url: 'https://grafana.istio-system.svc:3000'
      url: 'https://grafana-istio-system.apps.july26.vqqh.p1.openshiftapps.com'
    istio:
      config_map_name: istio-full-install
      istio_sidecar_injector_config_map_name: istio-sidecar-injector-full-install
      istiod_deployment_name: istiod-full-install
      url_service_version: 'http://istiod-full-install.istio-system:15014/version'
    prometheus:
      auth:
        insecure_skip_verify: true
        type: bearer
        use_kiali_token: true
      query_scope:
        mesh_id: istio-system/full-install
      url: 'https://thanos-querier.openshift-monitoring.svc.cluster.local:9091'
    tracing:
      auth:
        password: ciao
        type: basic
        use_kiali_token: false
        username: internal
      enabled: true
      in_cluster_url: 'https://jaeger-query.istio-system.svc'
      namespace: istio-system
      service: ''
      url: 'https://jaeger-istio-system.apps.july26.vqqh.p1.openshiftapps.com'
      use_grpc: false
  installation_tag: 'Kiali [istio-system]'
  istio_namespace: istio-system
  version: v1.65
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kiali-prometheus-monitoring-exporter-istio-system
subjects:
  - kind: ServiceAccount
    name: kiali-service-account
    namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-monitoring-exporter-istio-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prometheus-monitoring-exporter-istio-system
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - ''
    resources:
      - namespaces             